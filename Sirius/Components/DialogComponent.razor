<div class="modal @_modalClass" tabindex="-1" role="dialog" style="display:@_modalDisplay; overflow-y: auto;">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@_title</h5>
                <button class="btn-icon-default" data-dismiss="modal" @onclick="Close">
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708" />
                    </svg>
                </button>
            </div>
            <div class="modal-body @(string.IsNullOrEmpty(_title) ? "p-0" : "" )">
                @_body
            </div>
        </div>
    </div>
</div>

@if (_showBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {

    private String? _title;
    private RenderFragment? _body;
    [Inject]
    private DialogProvider dialogProvider { get; set; } = default!;

    private string _modalDisplay = "none;";
    private string _modalClass = "";
    private bool _showBackdrop = false;

    protected override void OnInitialized()
    {
        dialogProvider.Open += Open;
        dialogProvider.Close += Close;
    }

    private void Open(String title, RenderFragment body)
    {
        _title = title;
        _body = body;
        _modalDisplay = "block;";
        _modalClass = "show";
        _showBackdrop = true;
        InvokeAsync(StateHasChanged);
    }

    private void Close()
    {
        _modalDisplay = "none";
        _modalClass = "";
        _showBackdrop = false;
        _body = null;
        InvokeAsync(StateHasChanged);
    }

}