
<div class="payment-update-content">
    <div class="d-grid">
        <span>* Nome</span>
        <input placeholder="Netflix" maxlength="256" @bind-value="Request.Name" />
    </div>
    <div class="d-grid">
        <span>Descrição</span>
        <textarea placeholder="Plano premium" rows="5" maxlength="1000" @bind="Request.Description" />
    </div>
    <div class="d-grid">
        <span>Valor</span>
        <InputNumber TValue="decimal" @bind-Value=Request.Value class="currency-mask"></InputNumber>
    </div>
    <div class="d-grid">
        <span>Categoria</span>
        <select @bind="Request.CategoryId">
            <option value="">Nenhum</option>
            @foreach (var category in Categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </select>
    </div>
    <div class="d-grid">
        <span>Dia do pagamento</span>
        <select @bind="Request.PayDay">
            <option value="">Nenhum</option>
            @for (var index =1; index <= 31; index ++)
            {
                <option value="@index">@index</option>
            }
        </select>
    </div>
    <div class="d-flex payment-update-action">
        <button class="btn-default" @onclick=OnClickClose>
            Cancelar
        </button>
        <button class="btn-default-action" @onclick=OnClickUpdate>
            Atualizar
        </button>
    </div>
</div>

@code {
    [Inject]
    private DialogProvider DialogProvider { get; set; } = default!;
    [Inject]
    private IPaymentService PaymentService { get; set; } = default!;
    [Inject]
    private ICategoryService CategoryService { get; set; } = default!;
    [Inject]
    private ToastProvider ToastProvider { get; set; } = default!;
    [Inject]
    private JavaScriptProvider JavaScriptProvider { get; set; } = default!;
    [Parameter]
    public PaymentRequestDTO Request { get; set; } = default!;
    private List<CategoryResponseDTO> Categories = new List<CategoryResponseDTO>();

    protected override void OnAfterRender(bool firstRender) => JavaScriptProvider.ApplyCurrencyMask();

    protected override async Task OnInitializedAsync()
    {
        Categories = await CategoryService.GetAll();
        Categories = Categories.OrderBy(x => x.Name).ToList();
        StateHasChanged();
    }

    private async Task OnClickUpdate()
    {
        try
        {
            if (string.IsNullOrEmpty(Request.Name))
            {
                ToastProvider.ShowToast("Nome da pagamento é obrigatório", ToastLevelEnum.Error);
                return;
            }
            if (await PaymentService.Exists(Request))
            {
                ToastProvider.ShowToast("Já existe um pagamento com esse nome", ToastLevelEnum.Error);
                return;
            }
            var response = await PaymentService.Update(Request);
            ToastProvider.ShowToast("Atualizado com sucesso", ToastLevelEnum.Success);
            DialogProvider.CloseDialog(response);
        }
        catch(Exception)
        {
            ToastProvider.ShowToast("Erro ao criar pagamento", ToastLevelEnum.Error);
        }
    }

    private void OnClickClose()
    {
        DialogProvider.CloseDialog();
    }
}
