@page "/"

<PageTitle>Sirius - Início</PageTitle>

<div>
    @if(Registers == null)
    {
        <LoadingComponent IsInLineProgress=true></LoadingComponent>
    }

    <h3>
        @DateUtil.GetMonth(CurrentDate.Month) de @(CurrentDate.Year)
    </h3>

    <div class="d-flex home-content-header">
        <div class="custom-card">
            <div class="d-flex justify-content-between">
                <span>Total pago</span>
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-currency-dollar" viewBox="0 0 16 16">
                    <path d="M4 10.781c.148 1.667 1.513 2.85 3.591 3.003V15h1.043v-1.216c2.27-.179 3.678-1.438 3.678-3.3 0-1.59-.947-2.51-2.956-3.028l-.722-.187V3.467c1.122.11 1.879.714 2.07 1.616h1.47c-.166-1.6-1.54-2.748-3.54-2.875V1H7.591v1.233c-1.939.23-3.27 1.472-3.27 3.156 0 1.454.966 2.483 2.661 2.917l.61.162v4.031c-1.149-.17-1.94-.8-2.131-1.718zm3.391-3.836c-1.043-.263-1.6-.825-1.6-1.616 0-.944.704-1.641 1.8-1.828v3.495l-.2-.05zm1.591 1.872c1.287.323 1.852.859 1.852 1.769 0 1.097-.826 1.828-2.2 1.939V8.73z" />
                </svg>
            </div>
            <h3>@FormatUtil.FormatCurrency(GetValueTotalPaid(), true)</h3>
        </div>
        <div class="custom-card">
            <div class="d-flex justify-content-between">
                <span>Valor a pagar</span>
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-currency-dollar" viewBox="0 0 16 16">
                    <path d="M4 10.781c.148 1.667 1.513 2.85 3.591 3.003V15h1.043v-1.216c2.27-.179 3.678-1.438 3.678-3.3 0-1.59-.947-2.51-2.956-3.028l-.722-.187V3.467c1.122.11 1.879.714 2.07 1.616h1.47c-.166-1.6-1.54-2.748-3.54-2.875V1H7.591v1.233c-1.939.23-3.27 1.472-3.27 3.156 0 1.454.966 2.483 2.661 2.917l.61.162v4.031c-1.149-.17-1.94-.8-2.131-1.718zm3.391-3.836c-1.043-.263-1.6-.825-1.6-1.616 0-.944.704-1.641 1.8-1.828v3.495l-.2-.05zm1.591 1.872c1.287.323 1.852.859 1.852 1.769 0 1.097-.826 1.828-2.2 1.939V8.73z" />
                </svg>
            </div>
            <h3>@FormatUtil.FormatCurrency(GetValueTotalPendingPayments(), true)</h3>
        </div>
        <div class="custom-card">
            <div class="d-flex justify-content-between">
                <span>Total Previsto</span>
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-currency-dollar" viewBox="0 0 16 16">
                    <path d="M4 10.781c.148 1.667 1.513 2.85 3.591 3.003V15h1.043v-1.216c2.27-.179 3.678-1.438 3.678-3.3 0-1.59-.947-2.51-2.956-3.028l-.722-.187V3.467c1.122.11 1.879.714 2.07 1.616h1.47c-.166-1.6-1.54-2.748-3.54-2.875V1H7.591v1.233c-1.939.23-3.27 1.472-3.27 3.156 0 1.454.966 2.483 2.661 2.917l.61.162v4.031c-1.149-.17-1.94-.8-2.131-1.718zm3.391-3.836c-1.043-.263-1.6-.825-1.6-1.616 0-.944.704-1.641 1.8-1.828v3.495l-.2-.05zm1.591 1.872c1.287.323 1.852.859 1.852 1.769 0 1.097-.826 1.828-2.2 1.939V8.73z" />
                </svg>
            </div>
            <h3>@FormatUtil.FormatCurrency(GetValueTotalPredicted(), true)</h3>
        </div>
    </div>
    <div class="d-flex home-content">
        <div class="home-content-registers">
            <b>Pagos - @(Registers?.Count ?? 0)</b>
            <table class="table">
                <thead>
                    <tr>
                        <th>Nome</th>
                        <th>Valor</th>
                        <th>Pago em</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var register in Registers ?? [])
                    {
                        <tr>
                            <td>
                                @register.Payment.Name
                            </td>
                            <td style="max-width:8em; width:8em">
                                @FormatUtil.FormatCurrency(register.Value)
                            </td>
                            <td style="max-width:8em; width:8em">
                                @register.PaidAt.ToShortDateString()
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="home-content-payments">
            <b>A pagar - @GetTotalPendingPayments()</b>
            <table class="table">
                <thead>
                    <tr>
                        <th>Nome</th>
                        <th>Valor</th>
                        <th>Pagar até</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var payment in GetPendingPayments())
                    {
                        <tr>
                            <td>
                                @payment.Name
                            </td>
                            <td style="max-width:8em; width:8em">
                                @FormatUtil.FormatCurrency(payment.Value)
                            </td>
                            <td style="max-width:8em; width:8em">
                                @GetPaymentAt(payment.PayDay)?.ToShortDateString()
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    [Inject]
    private IRegisterService RegisterService { get; set; } = default!;
    [Inject]
    private IPaymentService PaymentService { get; set; } = default!;
    private List<RegisterResponseDTO>? Registers;
    private List<PaymentResponseDTO>? Payments;
    private DateTime CurrentDate = DateTime.UtcNow;

    protected override async Task OnInitializedAsync()
    {
        var startDate = new DateTime(CurrentDate.Year, CurrentDate.Month, 1, 0, 0, 0, DateTimeKind.Utc);
        var finalDate = new DateTime(CurrentDate.Year, CurrentDate.Month + 1, 1, 23, 59, 59, DateTimeKind.Utc).AddDays(-1);
        Registers = await RegisterService.GetAll(startDate, finalDate);
        Payments = await PaymentService.GetAll();
    }

    private decimal GetValueTotalPaid()
    {
        if (Registers == null)
        {
            return 0;
        }
        return Registers.Sum(x => x.Value);
    }

    private DateTime? GetPaymentAt(int? payDay)
    {
        if (payDay == null)
        {
            return null;
        }

        return DateUtil.CurrentDateByDay(payDay.Value);
    }

    private List<PaymentResponseDTO> GetPendingPayments()
    {
        if (Registers == null || Payments == null)
        {
            return [];
        }
        return Payments.Where(x => !Registers.Any(r => r.Payment.Id == x.Id)).ToList();
    }

    private int GetTotalPendingPayments()
    {
        if (Registers == null || Payments == null)
        {
            return 0;
        }
        return Payments.Where(x => !Registers.Any(r => r.Payment.Id == x.Id)).Count();
    }

    private decimal GetValueTotalPendingPayments()
    {
        if (Registers == null || Payments == null)
        {
            return 0;
        }
        return Payments.Where(x => !Registers.Any(r => r.Payment.Id == x.Id)).Sum(x => x.Value);
    }

    private decimal GetValueTotalPredicted()
    {
        if (Registers == null || Payments == null)
        {
            return 0;
        }
        var valueTotalPayments = Payments.Where(x => !Registers.Any(r => r.Payment.Id == x.Id)).Sum(x => x.Value);
        var valueTotalRegisters = Registers.Sum(x => x.Value);
        return valueTotalPayments + valueTotalRegisters;
    }
}
