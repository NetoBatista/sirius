
<div class="register-update-content">
    <div class="d-grid">
        <span>Pagamento</span>
        <select @bind=selectedPayment>
            @foreach (var payment in Payments)
            {
                <option value="@payment.Id">@payment.Name</option>
            }
        </select>
    </div>
    <div class="d-grid">
        <span>Valor</span>
        <InputNumber TValue="decimal" @bind-Value=Request.Value class="currency-mask"></InputNumber>
    </div>
    <div class="d-grid">
        <span>Data do pagamento</span>
        <input type="date" @bind-value=Request.PaidAt
               max="@DateTime.UtcNow.ToString("yyyy-MM-dd")"
               min="@DateUtil.GetMinDate().ToString("yyyy-MM-dd")" />
    </div>
    <div class="d-flex register-update-action">
        <button class="btn-default" @onclick=OnClickClose>
            Cancelar
        </button>
        <button class="btn-default-action" @onclick=OnClickUpdate>
            Atualizar
        </button>
    </div>
</div>

@code {
    [Inject]
    private DialogProvider DialogProvider { get; set; } = default!;
    [Inject]
    private IRegisterService registerService { get; set; } = default!;
    [Inject]
    private IPaymentService PaymentService { get; set; } = default!;
    [Inject]
    private ToastProvider ToastProvider { get; set; } = default!;
    [Inject]
    private JavaScriptProvider JavaScriptProvider { get; set; } = default!;
    [Parameter]
    public RegisterRequestDTO Request { get; set; } = default!;
    private List<PaymentResponseDTO> Payments = new List<PaymentResponseDTO>();

    public Guid selectedPayment
    {
        get
        {
            return Request.PaymentId;
        }
        set
        {
            Request.PaymentId = value;
            OnChangePayment(value);
        }
    }

    protected override void OnAfterRender(bool firstRender) => JavaScriptProvider.ApplyCurrencyMask();

    protected override async Task OnInitializedAsync()
    {
        Payments = await PaymentService.GetAll();
        Payments = Payments.OrderBy(x => x.Name).ToList();
        StateHasChanged();
    }

    private async Task OnClickUpdate()
    {
        try
        {
            if (Request.PaymentId == Guid.Empty)
            {
                ToastProvider.ShowToast("É necessário selecionar um pagamento", ToastLevelEnum.Error);
                return;
            }
            Request.PaidAt = Request.PaidAt.ToUniversalTime();
            if (Request.PaidAt > DateTime.UtcNow || Request.PaidAt < DateUtil.GetMinDate())
            {
                var error = $"Data precisar ser entre {DateTime.UtcNow.ToShortDateString()} e {DateUtil.GetMinDate().ToShortDateString()}";
                ToastProvider.ShowToast(error, ToastLevelEnum.Error);
                return;
            }
            var response = await registerService.Update(Request);
            ToastProvider.ShowToast("Criado com sucesso", ToastLevelEnum.Success);
            DialogProvider.CloseDialog(response);
        }
        catch(Exception)
        {
            ToastProvider.ShowToast("Erro ao atualizar registro", ToastLevelEnum.Error);
        }
    }

    private void OnChangePayment(Guid paymentId)
    {
        var payment = Payments.First(x => x.Id == paymentId);
        Request.PaymentId = payment.Id;
        Request.Value = payment.Value;
        StateHasChanged();
    }

    private void OnClickClose()
    {
        DialogProvider.CloseDialog();
    }
}
